import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ParseMode
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import CommandStart
from datetime import datetime
import os
from environs import Env
import gspread
from google.oauth2.service_account import Credentials
import platform
import sqlite3
import psycopg2
from psycopg2 import sql, IntegrityError
import re

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
env = Env()
env.read_env()
API_TOKEN = env.str('BOT_TOKEN')

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

# --- Google Sheets –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SHEET_ID = '1luwtoyzIsnCTmpbY5L-POpTSh5hNWlX8zGMr1GPIlFY'
SHEET_NAME = '–ö–∏—Ä–∏–º –ß–∏–∫–∏–º'
CREDENTIALS_FILE = 'credentials.json'

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    type = State()      # Kirim/Ciqim
    amount = State()    # –°—É–º–º–∞
    category = State()  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    comment = State()   # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    object = State()    # –û–±—ä–µ–∫—Ç

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
class CategoryRequest(StatesGroup):
    name = State()      # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ–±—ä–µ–∫—Ç–∞
class ObjectRequest(StatesGroup):
    name = State()      # –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ Kirim/Chiqim
start_kb = InlineKeyboardMarkup(row_width=2)
start_kb.add(
    InlineKeyboardButton('üü¢ Kirim', callback_data='type_kirim'),
    InlineKeyboardButton('üî¥ Chiqim', callback_data='type_chiqim')
)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
categories = [
    ("üü• Doimiy Xarajat", "cat_doimiy"),
    ("üü© O ªzgaruvchan Xarajat", "cat_ozgaruvchan"),
    ("üü™ Qarz", "cat_qarz"),
    ("‚ö™ Avtoprom", "cat_avtoprom"),
    ("üü© Divident", "cat_divident"),
    ("üü™ Soliq", "cat_soliq"),
    ("üü¶ Ish Xaqi", "cat_ishhaqi")
]

# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: –∫–∞—Ç–µ–≥–æ—Ä–∏—è -> —ç–º–æ–¥–∑–∏
category_emojis = {
    "Qurilish materiallari": "üü©",
    "Doimiy Xarajat": "üü•",
    "Qarz": "üü™",
    "Divident": "üü©",
    "Soliq": "üü™",
    "Ish Xaqi": "üü¶",
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —ç–º–æ–¥–∑–∏ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

def get_category_with_emoji(category_name):
    emoji = category_emojis.get(category_name, "")
    return f"{emoji} {category_name}".strip()

def get_categories_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    for name in get_categories():
        cb = f"cat_{name}"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –º–µ–Ω—é
        btn_text = get_category_with_emoji(name)
        kb.add(InlineKeyboardButton(btn_text, callback_data=cb))
    return kb

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–ª—è Izoh
skip_kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment"))

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirm_kb = InlineKeyboardMarkup(row_width=2)
confirm_kb.add(
    InlineKeyboardButton('‚úÖ Ha', callback_data='confirm_yes'),
    InlineKeyboardButton('‚ùå Yo\'q', callback_data='confirm_no')
)

def clean_emoji(text):
    # –£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏/—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏, –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–µ —Ç—Ä–æ–≥–∞–µ—Ç
    return re.sub(r'^[^\w\s]*', '', text).strip()

def add_to_google_sheet(data):
    try:
        creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
        gc = gspread.authorize(creds)
        sh = gc.open_by_key(SHEET_ID)
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Å—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        try:
            worksheet = sh.worksheet(SHEET_NAME)
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –ª–∏—Å—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª–∏—Å—Ç '{SHEET_NAME}': {e}")
            worksheet = sh.get_worksheet(0)  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
            logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç: {worksheet.title}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        from datetime import datetime
        now = datetime.now()
        
        # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã DD.MM.YYYY
        date_str = now.strftime('%d.%m.%Y')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ –ö–∏—Ä–∏–º –∏ –ß–∏“õ–∏–º
        kirim = data.get('amount', '') if data.get('type') == 'Kirim' else ''
        chiqim = data.get('amount', '') if data.get('type') == 'Ciqim' else ''
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
        # A: –°–∞–Ω–∞, B: –ö–∏—Ä–∏–º, C: –ß–∏“õ–∏–º, E: –ö–æ—Ç–µ–≥–æ—Ä–∏—è, F: –ò–∑–æ—Ö, G: –û–±—ä–µ–∫—Ç –Ω–æ–º–∏
        row = [
            date_str,                    # A: –°–∞–Ω–∞ (–¥–∞—Ç–∞)
            kirim,                       # B: –ö–∏—Ä–∏–º (–¥–æ—Ö–æ–¥)
            chiqim,                      # C: –ß–∏“õ–∏–º (—Ä–∞—Å—Ö–æ–¥)
            '',                          # D: –æ—Å—Ç–∞—Ç–∫–∞ (–ø—É—Å—Ç–æ–π)
            data.get('category', ''),    # E: –ö–æ—Ç–µ–≥–æ—Ä–∏—è
            data.get('comment', ''),     # F: –ò–∑–æ—Ö
            data.get('loyiha', '')       # G: –û–±—ä–µ–∫—Ç –Ω–æ–º–∏
        ]
        
        worksheet.append_row(row)
        logging.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Google Sheets: {row}")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ Google Sheets: {e}")
        raise e

def format_summary(data):
    tur_emoji = 'üü¢' if data.get('type') == 'Kirim' else 'üî¥'
    dt = data.get('dt', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —ç–º–æ–¥–∑–∏
    category_with_emoji = get_category_with_emoji(data.get('category', '-'))
    return (
        f"<b>Natija:</b>\n"
        f"<b>Tur:</b> {tur_emoji} {data.get('type', '-')}\n"
        f"<b>Summa:</b> {data.get('amount', '-')}\n"
        f"<b>Kotegoriya:</b> {category_with_emoji}\n"
        f"<b>Izoh:</b> {data.get('comment', '-')}\n"
        f"<b>–û–±—ä–µ–∫—Ç –Ω–æ–º–∏:</b> {data.get('loyiha', '-')}\n"
        f"<b>Vaqt:</b> {dt}"
    )

# --- –ê–¥–º–∏–Ω—ã ---
ADMINS = [5657091547, 5048593195]  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å id –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
def get_db_conn():
    return psycopg2.connect(
        dbname=env.str('POSTGRES_DB', 'kapital'),
        user=env.str('POSTGRES_USER', 'postgres'),
        password=env.str('POSTGRES_PASSWORD', 'postgres'),
        host=env.str('POSTGRES_HOST', 'localhost'),
        port=env.str('POSTGRES_PORT', '5432')
    )

def init_db():
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        user_id BIGINT UNIQUE,
        name TEXT,
        phone TEXT,
        status TEXT,
        reg_date TEXT
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS categories (
        id SERIAL PRIMARY KEY,
        name TEXT UNIQUE
    )''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS objects (
        id SERIAL PRIMARY KEY,
        name TEXT UNIQUE
    )''')
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –ø—É—Å—Ç—ã
    c.execute('SELECT COUNT(*) FROM categories')
    if c.fetchone()[0] == 0:
        for name in ["üü• Doimiy Xarajat", "üü© O ªzgaruvchan Xarajat", "üü™ Qarz", "‚ö™ Avtoprom", "üü© Divident", "üü™ Soliq", "üü¶ Ish Xaqi"]:
            c.execute('INSERT INTO categories (name) VALUES (%s)', (name,))
    
    c.execute('SELECT COUNT(*) FROM objects')
    if c.fetchone()[0] == 0:
        for name in ["üèóÔ∏è UzAvtosanoat", "üè¢ Bodomzor", "üè† Boshqa"]:
            c.execute('INSERT INTO objects (name) VALUES (%s)', (name,))
    conn.commit()
    conn.close()

init_db()

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def get_user_status(user_id):
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT status FROM users WHERE user_id=%s', (user_id,))
    row = c.fetchone()
    conn.close()
    return row[0] if row else None

def register_user(user_id, name, phone):
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('INSERT INTO users (user_id, name, phone, status, reg_date) VALUES (%s, %s, %s, %s, %s)',
              (user_id, name, phone, 'pending', datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
    conn.commit()
    conn.close()

def update_user_status(user_id, status):
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('UPDATE users SET status=%s WHERE user_id=%s', (status, user_id))
    conn.commit()
    conn.close()

def get_user_name(user_id):
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT name FROM users WHERE user_id=%s', (user_id,))
    row = c.fetchone()
    conn.close()
    return row[0] if row else None

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ ---
def get_categories():
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT name FROM categories')
    result = [row[0] for row in c.fetchall()]
    conn.close()
    return result

def get_objects():
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT name FROM objects')
    result = [row[0] for row in c.fetchall()]
    conn.close()
    return result

def get_objects_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    for name in get_objects():
        cb = f"obj_{name}"
        kb.add(InlineKeyboardButton(name, callback_data=cb))
    return kb

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
@dp.message_handler(commands=['start'])
async def start(msg: types.Message, state: FSMContext):
    await state.finish()
    text = "<b>Qaysi turdagi operatsiya?</b>"
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton('üü¢ Kirim', callback_data='type_kirim'),
        InlineKeyboardButton('üî¥ Chiqim', callback_data='type_chiqim')
    )
    await msg.answer(text, reply_markup=kb)
    await Form.type.set()

# Kirim/Ciqim –≤—ã–±–æ—Ä
@dp.callback_query_handler(lambda c: c.data.startswith('type_'), state=Form.type)
async def process_type(call: types.CallbackQuery, state: FSMContext):
    t = 'Kirim' if call.data == 'type_kirim' else 'Ciqim'
    await state.update_data(type=t)
    await call.message.edit_text("<b>Summani kiriting:</b>")
    await Form.amount.set()
    await call.answer()

# –°—É–º–º–∞
@dp.message_handler(lambda m: m.text.replace('.', '', 1).isdigit(), state=Form.amount)
async def process_amount(msg: types.Message, state: FSMContext):
    await state.update_data(amount=msg.text)
    await msg.answer("<b>Kotegoriyani tanlang:</b>", reply_markup=get_categories_kb())
    await Form.category.set()

# –ö–∞—Ç–µ–≥–æ—Ä–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith('cat_'), state=Form.category)
async def process_category(call: types.CallbackQuery, state: FSMContext):
    cat = call.data[4:]
    await state.update_data(category=cat)
    await call.message.edit_text("<b>Izoh kiriting (yoki –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):</b>", reply_markup=skip_kb)
    await Form.comment.set()
    await call.answer()

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@dp.callback_query_handler(lambda c: c.data == 'skip_comment', state=Form.comment)
async def skip_comment_btn(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(comment='-')
    await call.message.edit_text("<b>–û–±—ä–µ–∫—Ç –Ω–æ–º–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:</b>", reply_markup=get_objects_kb())
    await Form.object.set()
    await call.answer()

# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫)
@dp.message_handler(state=Form.comment, content_types=types.ContentTypes.TEXT)
async def process_comment(msg: types.Message, state: FSMContext):
    await state.update_data(comment=msg.text)
    await msg.answer("<b>–û–±—ä–µ–∫—Ç –Ω–æ–º–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:</b>", reply_markup=get_objects_kb())
    await Form.object.set()

# –û–±—ä–µ–∫—Ç (–≤—ã–±–æ—Ä –∏–∑ –∫–Ω–æ–ø–æ–∫)
@dp.callback_query_handler(lambda c: c.data.startswith('obj_'), state=Form.object)
async def process_object_selection(call: types.CallbackQuery, state: FSMContext):
    object_name = call.data[4:]  # –£–±–∏—Ä–∞–µ–º 'obj_' –∏–∑ –Ω–∞—á–∞–ª–∞
    await state.update_data(loyiha=object_name)
    data = await state.get_data()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    text = format_summary(data)
    await call.message.edit_text(text, reply_markup=confirm_kb)
    await state.set_state('confirm')
    await call.answer()

# –û–±—ä–µ–∫—Ç (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥ - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
@dp.message_handler(state=Form.object, content_types=types.ContentTypes.TEXT)
async def process_object_manual(msg: types.Message, state: FSMContext):
    await state.update_data(loyiha=msg.text)
    data = await state.get_data()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    text = format_summary(data)
    await msg.answer(text, reply_markup=confirm_kb)
    await state.set_state('confirm')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –î–∞/–ù–µ—Ç
@dp.callback_query_handler(lambda c: c.data in ['confirm_yes', 'confirm_no'], state='confirm')
async def process_confirm(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'confirm_yes':
        data = await state.get_data()
        from datetime import datetime
        dt = datetime.now()
        import platform
        if platform.system() == 'Windows':
            date_str = dt.strftime('%m/%d/%Y')
        else:
            date_str = dt.strftime('%-m/%-d/%Y')
        time_str = dt.strftime('%H:%M')
        data['dt_for_sheet'] = date_str
        data['vaqt'] = time_str
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ user_id –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
        data['user_id'] = call.from_user.id
        try:
            add_to_google_sheet(data)
            await call.message.answer('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Google Sheets!')

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            user_name = get_user_name(call.from_user.id) or call.from_user.full_name
            summary_text = format_summary(data)
            admin_notification_text = f"Foydalanuvchi <b>{user_name}</b> tomonidan kiritilgan yangi ma'lumot:\n\n{summary_text}"
            
            for admin_id in ADMINS:
                try:
                    await bot.send_message(admin_id, admin_notification_text)
                except Exception as e:
                    logging.error(f"Could not send notification to admin {admin_id}: {e}")

        except Exception as e:
            await call.message.answer(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Google Sheets: {e}')
        await state.finish()
    else:
        await call.message.answer('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
        await state.finish()
    # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —à–∞–≥—É
    text = "<b>Qaysi turdagi operatsiya?</b>"
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton('üü¢ Kirim', callback_data='type_kirim'),
        InlineKeyboardButton('üî¥ Chiqim', callback_data='type_chiqim')
    )
    await call.message.answer(text, reply_markup=kb)
    await Form.type.set()
    await call.answer()

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@dp.message_handler(commands=['request_category'], state='*')
async def request_category_cmd(msg: types.Message, state: FSMContext):
    await state.finish()
    await msg.answer('üìù Yangi kategoriya qo\'shish so\'rovini yuboring.\n\n'
                    'Kategoriya nomini kiriting:')
    await CategoryRequest.name.set()

@dp.message_handler(state=CategoryRequest.name, content_types=types.ContentTypes.TEXT)
async def process_category_request_name(msg: types.Message, state: FSMContext):
    category_name = msg.text.strip()
    user_id = msg.from_user.id
    user_name = msg.from_user.full_name or msg.from_user.username or f"User {user_id}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS category_requests (
        id SERIAL PRIMARY KEY,
        user_id BIGINT,
        user_name TEXT,
        category_name TEXT,
        status TEXT DEFAULT 'pending',
        request_date TEXT
    )''')
    
    c.execute('INSERT INTO category_requests (user_id, user_name, category_name, request_date) VALUES (%s, %s, %s, %s)',
              (user_id, user_name, category_name, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
    conn.commit()
    conn.close()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    admin_message = (
        f'üÜï Yangi kategoriya so\'rovi:\n\n'
        f'üë§ Foydalanuvchi: {user_name}\n'
        f'üìù Kategoriya: {category_name}\n'
        f'üÜî User ID: {user_id}'
    )
    
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton('‚úÖ Qo\'shish', callback_data=f'approve_cat_{user_id}_{category_name}'),
        InlineKeyboardButton('‚ùå Rad etish', callback_data=f'deny_cat_{user_id}_{category_name}')
    )
    
    for admin_id in ADMINS:
        try:
            await bot.send_message(admin_id, admin_message, reply_markup=kb)
        except Exception as e:
            logging.error(f"Could not send notification to admin {user_id}: {e}")
    
    await msg.answer('‚úÖ Kategoriya so\'rovingiz adminga yuborildi. Iltimos, tasdiqlashini kuting.')
    await state.finish()

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ–±—ä–µ–∫—Ç–∞ ---
@dp.message_handler(commands=['request_object'], state='*')
async def request_object_cmd(msg: types.Message, state: FSMContext):
    await state.finish()
    await msg.answer('üìù Yangi obyekt nomini kiriting:')
    await ObjectRequest.name.set()

@dp.message_handler(state=ObjectRequest.name, content_types=types.ContentTypes.TEXT)
async def process_object_request_name(msg: types.Message, state: FSMContext):
    object_name = msg.text.strip()
    user_id = msg.from_user.id
    user_name = msg.from_user.full_name or msg.from_user.username or f"User {user_id}"
    
    # –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
    conn = get_db_conn()
    c = conn.cursor()
    
    try:
        c.execute('INSERT INTO objects (name) VALUES (%s)', (object_name,))
        conn.commit()
        
        await msg.answer(f'‚úÖ Obyekt "{object_name}" muvaffaqiyatli qo\'shildi!\n\n'
                        f'üìù Endi uni tanlashingiz mumkin.')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –æ–±—ä–µ–∫—Ç–µ
        admin_message = (
            f'üÜï Yangi obyekt qo\'shildi:\n\n'
            f'üë§ Foydalanuvchi: {user_name}\n'
            f'üèóÔ∏è Obyekt: {object_name}\n'
            f'üÜî User ID: {user_id}'
        )
        
        for admin_id in ADMINS:
            try:
                await bot.send_message(admin_id, admin_message)
            except Exception as e:
                logging.error(f"Could not notify admin {admin_id}: {e}")
                
    except IntegrityError:
        await msg.answer(f'‚ùóÔ∏è Obyekt "{object_name}" allaqachon mavjud.')
    except Exception as e:
        await msg.answer(f'‚ùå Xatolik yuz berdi: {str(e)}')
        logging.error(f"Error adding object: {e}")
    finally:
        conn.close()
    
    await state.finish()

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
@dp.message_handler(commands=['test_sheets'], state='*')
async def test_sheets_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    
    await state.finish()
    try:
        creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=SCOPES)
        gc = gspread.authorize(creds)
        sh = gc.open_by_key(SHEET_ID)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
        worksheets = sh.worksheets()
        sheet_names = [ws.title for ws in worksheets]
        
        await msg.answer(f'‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n'
                        f'üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã:\n' + 
                        '\n'.join([f'‚Ä¢ {name}' for name in sheet_names]) +
                        f'\n\nüéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ª–∏—Å—Ç: {SHEET_NAME}')
        
    except Exception as e:
        await msg.answer(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets:\n{str(e)}')

@dp.message_handler(commands=['add_category'], state='*')
async def add_category_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await msg.answer('Yangi kategoriya nomini yuboring:')
    await state.set_state('add_category')

@dp.message_handler(state='add_category', content_types=types.ContentTypes.TEXT)
async def add_category_save(msg: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    name = clean_emoji(msg.text.strip())
    conn = get_db_conn()
    c = conn.cursor()
    try:
        c.execute('INSERT INTO categories (name) VALUES (%s)', (name,))
        conn.commit()
        await msg.answer(f'‚úÖ Yangi kategoriya qo\'shildi: {name}')
    except IntegrityError:
        await msg.answer('‚ùóÔ∏è Bu nom allaqachon mavjud.')
        conn.rollback()
    conn.close()
    await state.finish()

# --- –£–¥–∞–ª–µ–Ω–∏–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ Kotegoriyalar ---
@dp.message_handler(commands=['del_category'], state='*')
async def del_category_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    kb = InlineKeyboardMarkup(row_width=1)
    for name in get_categories():
        kb.add(InlineKeyboardButton(f'‚ùå {name}', callback_data=f'del_category_{name}'))
    await msg.answer('O\'chirish uchun kategoriyani tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('del_category_'))
async def del_category_cb(call: types.CallbackQuery):
    if call.from_user.id not in ADMINS:
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    name = call.data[len('del_category_'):]
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('DELETE FROM categories WHERE name=%s', (name,))
    conn.commit()
    conn.close()
    await call.message.edit_text(f'‚ùå Kategoriya o\'chirildi: {name}')
    await call.answer()

@dp.message_handler(commands=['edit_category'], state='*')
async def edit_category_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    kb = InlineKeyboardMarkup(row_width=1)
    for name in get_categories():
        kb.add(InlineKeyboardButton(f'‚úèÔ∏è {name}', callback_data=f'edit_category_{name}'))
    await msg.answer('Tahrirlash uchun kategoriyani tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('edit_category_'))
async def edit_category_cb(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id not in ADMINS:
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    old_name = call.data[len('edit_category_'):]
    await state.update_data(edit_category_old=old_name)
    await call.message.answer(f'Yangi nomini yuboring (eski: {old_name}):')
    await state.set_state('edit_category_new')
    await call.answer()

@dp.message_handler(state='edit_category_new', content_types=types.ContentTypes.TEXT)
async def edit_category_save(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    old_name = data.get('edit_category_old')
    new_name = clean_emoji(msg.text.strip())
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('UPDATE categories SET name=%s WHERE name=%s', (new_name, old_name))
    conn.commit()
    conn.close()
    await msg.answer(f'‚úèÔ∏è Kategoriya o\'zgartirildi: {old_name} ‚Üí {new_name}')
    await state.finish()

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
@dp.message_handler(commands=['userslist'], state='*')
async def users_list_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT user_id, name, phone, status, reg_date FROM users ORDER BY reg_date DESC')
    users = c.fetchall()
    conn.close()
    
    if not users:
        await msg.answer('Foydalanuvchilar mavjud emas.')
        return
    
    text = '<b>Foydalanuvchilar ro\'yxati:</b>\n\n'
    for user in users:
        user_id, name, phone, status, reg_date = user
        status_emoji = '‚úÖ' if status == 'approved' else '‚è≥' if status == 'pending' else '‚ùå'
        text += f'{status_emoji} <b>{name}</b> (ID: {user_id})\n'
        text += f'üì± {phone}\n'
        text += f'üìÖ {reg_date}\n\n'
    
    await msg.answer(text)

@dp.message_handler(commands=['block_user'], state='*')
async def block_user_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    await state.finish()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT user_id, name, status FROM users WHERE status != \'blocked\' ORDER BY reg_date DESC')
    users = c.fetchall()
    conn.close()
    
    if not users:
        await msg.answer('Bloklash uchun foydalanuvchilar mavjud emas.')
        return
    
    kb = InlineKeyboardMarkup(row_width=1)
    for user_id, name, status in users:
        status_text = '‚úÖ Tasdiqlangan' if status == 'approved' else '‚è≥ Kutilmoqda'
        kb.add(InlineKeyboardButton(f'{status_text} - {name}', callback_data=f'blockuser_{user_id}'))
    
    await msg.answer('Bloklash uchun foydalanuvchini tanlang:', reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith('blockuser_'))
async def block_user_cb(call: types.CallbackQuery):
    if call.from_user.id not in ADMINS:
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    user_id = int(call.data[len('blockuser_'):])
    update_user_status(user_id, 'blocked')
    await call.message.edit_text(f'‚ùå Foydalanuvchi bloklandi (ID: {user_id})')
    await call.answer()

@dp.message_handler(commands=['category_requests'], state='*')
async def category_requests_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    
    await state.finish()
    conn = get_db_conn()
    c = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    c.execute('''CREATE TABLE IF NOT EXISTS category_requests (
        id SERIAL PRIMARY KEY,
        user_id BIGINT,
        user_name TEXT,
        category_name TEXT,
        description TEXT,
        status TEXT DEFAULT 'pending',
        request_date TEXT
    )''')
    
    c.execute('SELECT user_id, user_name, category_name, description, status, request_date FROM category_requests ORDER BY request_date DESC')
    requests = c.fetchall()
    conn.close()
    
    if not requests:
        await msg.answer('üìù Kategoriya so\'rovlari mavjud emas.')
        return
    
    text = '<b>üìù Kategoriya so\'rovlari:</b>\n\n'
    for req in requests:
        user_id, user_name, category_name, description, status, request_date = req
        status_emoji = '‚è≥' if status == 'pending' else '‚úÖ' if status == 'approved' else '‚ùå'
        status_text = 'Kutilmoqda' if status == 'pending' else 'Tasdiqlangan' if status == 'approved' else 'Rad etilgan'
        
        text += f'{status_emoji} <b>{category_name}</b>\n'
        text += f'üë§ {user_name}\n'
        text += f'üìÑ {description}\n'
        text += f'üìÖ {request_date}\n'
        text += f'üÜî {user_id}\n\n'
    
    await msg.answer(text)

@dp.message_handler(commands=['object_requests'], state='*')
async def object_requests_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    
    await state.finish()
    conn = get_db_conn()
    c = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    c.execute('''CREATE TABLE IF NOT EXISTS object_requests (
        id SERIAL PRIMARY KEY,
        user_id BIGINT,
        user_name TEXT,
        object_name TEXT,
        status TEXT DEFAULT 'pending',
        request_date TEXT
    )''')
    
    c.execute('SELECT user_id, user_name, object_name, status, request_date FROM object_requests ORDER BY request_date DESC')
    requests = c.fetchall()
    conn.close()
    
    if not requests:
        await msg.answer('üìù Obyekt so\'rovlari mavjud emas.')
        return
    
    text = '<b>üìù Obyekt so\'rovlari:</b>\n\n'
    for req in requests:
        user_id, user_name, object_name, status, request_date = req
        status_emoji = '‚è≥' if status == 'pending' else '‚úÖ' if status == 'approved' else '‚ùå'
        status_text = 'Kutilmoqda' if status == 'pending' else 'Tasdiqlangan' if status == 'approved' else 'Rad etilgan'
        
        text += f'{status_emoji} <b>{object_name}</b>\n'
        text += f'üë§ {user_name}\n'
        text += f'üìÖ {request_date}\n'
        text += f'üÜî {user_id}\n\n'
    
    await msg.answer(text)

@dp.message_handler(commands=['approve_user'], state='*')
async def approve_user_cmd(msg: types.Message, state: FSMContext):
    if msg.from_user.id not in ADMINS:
        await msg.answer('Faqat admin uchun!')
        return
    
    await state.finish()
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT user_id, name, status FROM users WHERE status = \'pending\' ORDER BY reg_date DESC')
    users = c.fetchall()
    conn.close()
    
    if not users:
        await msg.answer('Tasdiqlash uchun foydalanuvchilar mavjud emas.')
        return
    
    kb = InlineKeyboardMarkup(row_width=2)
    for user_id, name, status in users:
        kb.add(
            InlineKeyboardButton(f'‚úÖ {name}', callback_data=f'approveuser_{user_id}'),
            InlineKeyboardButton(f'‚ùå {name}', callback_data=f'denyuser_{user_id}')
        )
    
    await msg.answer('Tasdiqlash uchun foydalanuvchini tanlang:', reply_markup=kb)



# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
class Register(StatesGroup):
    name = State()
    phone = State()

@dp.message_handler(commands=['register'], state='*')
async def register_cmd(msg: types.Message, state: FSMContext):
    await state.finish()
    await msg.answer('Ismingizni kiriting:')
    await Register.name.set()

@dp.message_handler(state=Register.name, content_types=types.ContentTypes.TEXT)
async def process_register_name(msg: types.Message, state: FSMContext):
    await state.update_data(name=msg.text)
    await msg.answer('Telefon raqamingizni yuboring:', reply_markup=types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton('üì± Telefon raqamini yuborish', request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    ))
    await Register.phone.set()

@dp.message_handler(state=Register.phone, content_types=types.ContentTypes.CONTACT)
async def process_register_phone(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    name = data.get('name')
    phone = msg.contact.phone_number
    
    register_user(msg.from_user.id, name, phone)
    await msg.answer('‚úÖ Ro\'yxatdan o\'tish muvaffaqiyatli! Admin tasdiqlashini kuting.', 
                    reply_markup=types.ReplyKeyboardRemove())
    await state.finish()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@dp.callback_query_handler(lambda c: c.data.startswith('approveuser_') or c.data.startswith('denyuser_'), state='*')
async def process_admin_approve(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id not in ADMINS:
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    
    user_id = int(call.data.split('_')[1])
    action = call.data.split('_')[0]
    
    if action == 'approveuser':
        update_user_status(user_id, 'approved')
        await call.message.edit_text(f'‚úÖ Foydalanuvchi tasdiqlandi (ID: {user_id})')
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(user_id, 'üéâ Sizning ro\'yxatdan o\'tishingiz tasdiqlandi! Endi botdan foydalanishingiz mumkin.')
        except Exception as e:
            logging.error(f"Could not notify user {user_id}: {e}")
    else:
        update_user_status(user_id, 'denied')
        await call.message.edit_text(f'‚ùå Foydalanuvchi rad etildi (ID: {user_id})')
    
    await call.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π ---
@dp.callback_query_handler(lambda c: c.data.startswith('approve_cat_') or c.data.startswith('deny_cat_'), state='*')
async def process_category_approval(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id not in ADMINS:
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    
    data = call.data.split('_')
    action = data[0]  # approve –∏–ª–∏ deny
    user_id = int(data[2])
    category_name = '_'.join(data[3:])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    
    conn = get_db_conn()
    c = conn.cursor()
    
    if action == 'approve':
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        try:
            c.execute('INSERT INTO categories (name) VALUES (%s)', (category_name,))
            conn.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
            c.execute('UPDATE category_requests SET status=%s WHERE user_id=%s AND category_name=%s', 
                     ('approved', user_id, category_name))
            conn.commit()
            
            await call.message.edit_text(f'‚úÖ Kategoriya "{category_name}" qo\'shildi va foydalanuvchiga xabar yuborildi.')
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await bot.send_message(user_id, f'üéâ Sizning kategoriya so\'rovingiz tasdiqlandi!\n\n'
                                              f'‚úÖ Kategoriya: {category_name}\n'
                                              f'üìù Endi uni tanlashingiz mumkin.')
            except Exception as e:
                logging.error(f"Could not notify user {user_id}: {e}")
                
        except IntegrityError:
            await call.message.edit_text(f'‚ùóÔ∏è Kategoriya "{category_name}" allaqachon mavjud.')
            conn.rollback()
        except Exception as e:
            await call.message.edit_text(f'‚ùå Xatolik yuz berdi: {str(e)}')
            conn.rollback()
            
    else:  # deny
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
        c.execute('UPDATE category_requests SET status=%s WHERE user_id=%s AND category_name=%s', 
                 ('denied', user_id, category_name))
        conn.commit()
        
        await call.message.edit_text(f'‚ùå Kategoriya "{category_name}" rad etildi va foydalanuvchiga xabar yuborildi.')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(user_id, f'‚ùå Sizning kategoriya so\'rovingiz rad etildi.\n\n'
                                          f'üìù Kategoriya: {category_name}\n'
                                          f'üí° Boshqa nom bilan qayta so\'rov yuborishingiz mumkin.')
        except Exception as e:
            logging.error(f"Could not notify user {user_id}: {e}")
    
    conn.close()
    await call.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ ---
@dp.callback_query_handler(lambda c: c.data.startswith('approve_obj_') or c.data.startswith('deny_obj_'), state='*')
async def process_object_approval(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id not in ADMINS:
        await call.answer('Faqat admin uchun!', show_alert=True)
        return
    
    data = call.data.split('_')
    action = data[0]  # approve –∏–ª–∏ deny
    user_id = int(data[2])
    object_name = '_'.join(data[3:])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
    
    conn = get_db_conn()
    c = conn.cursor()
    
    if action == 'approve':
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
        try:
            c.execute('INSERT INTO objects (name) VALUES (%s)', (object_name,))
            conn.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
            c.execute('UPDATE object_requests SET status=%s WHERE user_id=%s AND object_name=%s', 
                     ('approved', user_id, object_name))
            conn.commit()
            
            await call.message.edit_text(f'‚úÖ Obyekt "{object_name}" qo\'shildi va foydalanuvchiga xabar yuborildi.')
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await bot.send_message(user_id, f'üéâ Sizning obyekt so\'rovingiz tasdiqlandi!\n\n'
                                              f'‚úÖ Obyekt: {object_name}\n'
                                              f'üìù Endi uni tanlashingiz mumkin.')
            except Exception as e:
                logging.error(f"Could not notify user {user_id}: {e}")
                
        except IntegrityError:
            await call.message.edit_text(f'‚ùóÔ∏è Obyekt "{object_name}" allaqachon mavjud.')
            conn.rollback()
        except Exception as e:
            await call.message.edit_text(f'‚ùå Xatolik yuz berdi: {str(e)}')
            conn.rollback()
            
    else:  # deny
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
        c.execute('UPDATE object_requests SET status=%s WHERE user_id=%s AND object_name=%s', 
                 ('denied', user_id, object_name))
        conn.commit()
        
        await call.message.edit_text(f'‚ùå Obyekt "{object_name}" rad etildi va foydalanuvchiga xabar yuborildi.')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(user_id, f'‚ùå Sizning obyekt so\'rovingiz rad etildi.\n\n'
                                          f'üìù Obyekt: {object_name}\n'
                                          f'üí° Boshqa nom bilan qayta so\'rov yuborishingiz mumkin.')
        except Exception as e:
            logging.error(f"Could not notify user {user_id}: {e}")
    
    conn.close()
    await call.answer()

# --- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@dp.message_handler(lambda msg: get_user_status(msg.from_user.id) != 'approved', state='*')
async def block_unapproved(msg: types.Message, state: FSMContext):
    if msg.text == '/register':
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await msg.answer('‚ùå Sizning ro\'yxatdan o\'tishingiz hali tasdiqlanmagan. Iltimos, kuting yoki /register buyrug\'ini ishlatib qaytadan ro\'yxatdan o\'ting.')

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ ---
async def set_user_commands(dp):
    await dp.bot.set_my_commands([
        types.BotCommand("start", "Boshlash"),
        types.BotCommand("register", "Ro'yxatdan o'tish"),
        types.BotCommand("request_category", "Yangi kategoriya so'rovini yuborish"),
        types.BotCommand("request_object", "Yangi obyekt qo'shish")
    ])

# --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
async def notify_all_users(bot):
    conn = get_db_conn()
    c = conn.cursor()
    c.execute('SELECT user_id FROM users WHERE status = \'approved\'')
    users = c.fetchall()
    conn.close()
    
    for user in users:
        try:
            await bot.send_message(user[0], 'üîî Yangi xabar!')
        except Exception as e:
            logging.error(f"Could not send notification to user {user[0]}: {e}")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    async def on_startup(dp):
        await set_user_commands(dp)
        logging.info('Bot started!')
    
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
